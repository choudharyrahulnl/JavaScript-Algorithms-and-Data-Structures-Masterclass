//////////////////
// BIG O NOTATION
/////////////////

// TIME COMPLEXITY
// ARITHMETIC OPERATIONS ARE CONSTANT
// VARIABLE ASSIGNMENT IS CONSTANT
// ASSESSING ELEMENT IN ARRAY USING INDEX IS CONSTANT
// IN A LOOP COMPLEXITY IS LENGTH OF LOOP TIMES WHATEVER HAPPENS INSIDE OF LOOP
// LOOP INSIDE A LOOP IS 0(n^2)

// SPACE COMPLEXITY
// AUXILIARY SPACE: SPACE REQUIRED BY THE ALGO, NOT INCLUDING SPACE TAKEN BY INPUT
// MOST PRIMITIVES TAKE CONSTANT SPACE
// STRING TAKES O(n) WHERE n IS THE STRING LENGTH
// REFERENCE TYPES ARE O(n), WHERE n IS THE LENGTH FOR ARRAYS OR NUMBER IF KEYS IN A OBJECT

// log2(8) = 3 --------------> 2^3 = 8
// log2(value) = exponent ----------> 2^exponent = value
// WE WILL OMIT BASE LIKE 2 IN THIS CASE log2 === log
// LOGARITHM OF NUMBER ROUGHLY MEASURES THE NUMBER OF TIMES YOU CAN DIVIDE THAT NUMBER BY 2
// BEFORE YOU GET A VALUE THAT IS LESS THAN OR EQUAL TO ONE
// EX log(8) ---> 3
// O(log n) IS GREAT
// RECURSION, SEARCHING & SORTING ALGO INVOLVES LOGARITHM